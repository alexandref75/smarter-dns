#!/bin/bash -f 
#
# Queries the CRI using crictl to find the pod names and IP addresses
# Creates a CoreDNS file plugin-compatible hosts file
#
#

mkdir -p /tmp/cridns

TMPFILE="/tmp/cridns/smarterdns.$$"
DNSFILE="/tmp/cridns/smarterdns"


env

# cluster
CLUSTER=${CLUSTER_DOMAIN:-"cluster.local"}

# cluster dns
DNS=${CLUSTER_DNS:-"169.254.0.2"}

# Setup to use default containerd socket
CRI_SOCKET_DIR=${CRI_DIR:-"unix:///run/containerd"}
CRI_SOCKET_FILE=${CRI_FILE:-"containerd.sock"}
CRICTL_SOCKET=${CRI_SOCKET_DIR}/${CRI_SOCKET_FILE}

# Try to find the k3s binary
if [ -f /host/usr/bin/k3s ]; then
    K3S_BIN="/host/usr/bin/k3s"
elif [ -f /host/usr/local/bin/k3s ]; then
    K3S_BIN="/host/usr/local/bin/k3s"            
fi

if [ ! -z "${CRICTL_BIN}" ]; then
    CRICTL=${CRICTL_BIN}
else
    CRICTL="$K3S_BIN crictl"
fi

#
echo "crictl using socket: ${CRICTL_SOCKET}"
echo "Container runtime info:"
${CRICTL} -r ${CRICTL_SOCKET} info


LOGGING=${DNS_LOGGING:-"False"}

INTERVAL=${WAIT_INTERVAL:-"30"}

host=`hostname`

NET_IFACE=${IFACE:-"eth0"}
HOSTIP=$(ip addr show dev ${NET_IFACE} | grep "inet" | sed -ne "s/inet \([0-9][0-9.]*\).*/\1/p")



comment=smarter-dns

# Remove any existing iptable rules
echo "Removing any existing iptables rules"
iptables-legacy -t nat -S | grep "${comment}" | sed 's/^-A //' | while read rule; do iptables-legacy -t nat -D $rule; done 

# Add iptable rules for smarter-dns
echo "Add iptable rules for smarter-dns"
iptables-legacy -t nat -A PREROUTING -d ${DNS}/32 -p udp -m udp --dport 53 -m comment --comment "${comment}" -j DNAT --to-destination ${HOSTIP}:353
iptables-legacy -t nat -A OUTPUT     -d ${DNS}/32 -p udp -m udp --dport 53 -m comment --comment "${comment}" -j DNAT --to-destination ${HOSTIP}:353


# cleanup
rm -rf pod_dns.*


while true; do
done=""
# Get the list of pods from the container runtime
    pods=`${CRICTL} -r ${CRICTL_SOCKET} pods -q`

# if there are pods
    if [[ ! -z $pods ]]; then

        rm -f $TMPFILE

        echo -n "# " > $TMPFILE
        date >> $TMPFILE

        for pod in $pods
        do
            IFS=', ' read -r -a  res < <(${CRICTL} -r ${CRICTL_SOCKET} inspectp -o json $pod |  tr '[:upper:]' '[:lower:]' | jq -r '[.status.network.ip, .info.config.hostname, .status.state, .status.labels.name, .status.metadata.namespace] | join(",")')
            if [ ${res[2]} == "sandbox_ready" ]; then
                if [[  -z "${res[0]}" ]]; then
                  ip=$HOSTIP
                  name=${res[3]}
                else
                  ip=${res[0]}
                  name=${res[1]}
                fi
                namespace=${res[4]}
		if [[ ! -z $name ]]; then 
                    if [ ${LOGGING} == "True" ]; then
                        echo $ip $name $name.$namespace.svc.${CLUSTER} $name.svc.${CLUSTER} $name."cluster.local"
                  fi
                  echo $ip $name $name.$namespace.svc.${CLUSTER} $name.svc.${CLUSTER} $name."cluster.local"  >> $TMPFILE
	        fi
            fi
        done

# swap TMPFILE and File read by COREDNS
        rm -f $DNSFILE
        mv $TMPFILE $DNSFILE
    fi

    sleep $INTERVAL
done
